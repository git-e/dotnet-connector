/*
  marshal -- basic marshal class template
  Copyright (c) 2011 Eric Karge

  dotnet-connector, a small library assisting create c++/.net wrappers
  The authors can be contacted at <eric@struction.de>

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
*/

#pragma once
#include <dnc/class_fwd>
#include <dnc/forwarder>
#include <dnc/toolbox/type_transform>

namespace dotnet_connector {

template <typename tTag>
struct marshal<tTag, TypeClass::Class> {
	typedef traits<tTag>
	traits;

	typedef typename traits::handle
	handle;

	typedef typename traits::type
	type;

#ifdef __cplusplus_cli
	typedef typename traits::managed
	managed;

	static
	handle
	from_managed(managed x) {
		return handle(x);
	}

	static
	managed
	to_managed(handle x) {
		return gcnew remove_const<type>::type(x, true, false);
	}
#else

	typedef typename traits::native
	native;

	static
	handle
	from_native(type & x) {
		return handle(new native(std::move(x)));
	}

	static
	handle
	from_native(type && x) {
		return handle(new native(std::move(x)));
	}

	static
	type &
	to_native(handle x) {
		return *x.pointer();
	}
#endif
};

template <typename tRefTag, typename tTag>
struct marshal<tRefTag, TypeClass::LValueRef<tTag, TypeClass::Class>>
{
	typedef traits<tTag>
	traits;

	typedef typename traits::handle
	handle;

	typedef typename traits::type
	type;

#ifdef __cplusplus_cli
	typedef typename traits::managed
	managed;

	static
	handle
	from_managed(managed x) {
		return handle(x);
	}

	static
	managed
	to_managed(handle x) {
		gchandle<object> *
		managed_x = traits::relay::managed(x);
		if ( ! managed_x )
			return gcnew type(x, false, false);
		return static_cast<managed>(managed_x->that());
	}
#else

	static
	handle
	from_native(type & x) {
		return handle(&x);
	}

	static
	type &
	to_native(handle x) {
		return *x.pointer();
	}
#endif
};

template <typename tRefTag, typename tTag>
struct marshal<tRefTag, TypeClass::LValueRef<tTag const, TypeClass::Class>>
{
	typedef traits<tTag const>
	traits;

	typedef typename traits::handle
	handle;

	typedef typename traits::type
	type;

#ifdef __cplusplus_cli
	typedef typename traits::managed
	managed;

	static
	handle
	from_managed(managed x) {
		return handle(x);
	}

	static
	managed
	to_managed(handle x) {
		return gcnew typename ::dotnet_connector::traits<tTag>::type(x, false, false);
	}
#else

	static
	handle
	from_native(type & x) {
		return handle(&x);
	}

	static
	type &
	to_native(handle x) {
		return *x.pointer();
	}
#endif
};

template <typename tRefTag, typename tTag>
struct marshal<tRefTag, TypeClass::RValueRef<tTag, TypeClass::Class>> :
	marshal<tTag>
{};

} /* namespace dotnet_connector */
