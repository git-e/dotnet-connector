/*
  type_transform -- type transformation templates
  Copyright (c) 2011 Eric Karge

  dotnet-connector, a small library assisting create c++/.net wrappers
  The authors can be contacted at <eric@struction.de>

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
*/

#pragma once
#include <type_traits>
#include <dnc/misc>

namespace dotnet_connector {

using std::remove_const;
using std::remove_volatile;
using std::remove_cv;
using std::remove_reference;
using std::add_const;
using std::add_volatile;
using std::add_cv;
using std::add_lvalue_reference;
using std::add_rvalue_reference;

template<typename _T>
struct weak_add_lvalue_reference :
	identity<_T &>
{};

template<typename _T>
struct weak_add_lvalue_reference<_T &&> :
	identity<_T &&>
{};

template<typename _T>
struct remove_const_ref :
	remove_const<typename remove_reference<_T>::type>
{};

template<typename _T>
struct remove_volatile_ref :
	remove_volatile<typename remove_reference<_T>::type>
{};

template<typename _T>
struct remove_cv_ref :
	remove_cv<typename remove_reference<_T>::type>
{};

template<typename source, typename target>
struct copy_const :
	identity<target>
{};

template<typename source, typename target>
struct copy_const<source const, target> :
	add_const<target>
{};

template<typename source, typename target>
struct copy_volatile :
	identity<target>
{};
template<typename source, typename target>
struct copy_volatile<source volatile, target> :
	add_volatile<target>
{};

template<typename source, typename target>
struct copy_cv :
	copy_volatile<source, typename copy_const<source, target>::type>
{};

template<typename source, typename target>
struct copy_cv_ref :
	copy_cv<source, target>
{};

template<typename source, typename target>
struct copy_reference :
	identity<target>
{};

template<typename source, typename target>
struct copy_reference<source &, target> :
	add_lvalue_reference<target>
{};

template<typename source, typename target>
struct copy_reference<source &&, target> :
	add_rvalue_reference<target>
{};

template<typename source, typename target>
struct copy_cv_ref<source &, target> :
	identity<typename copy_cv<source, target>::type &>
{};

template<typename source, typename target>
struct clone_const :
	copy_const<source, typename remove_const<target>::type>
{};

template<typename source, typename target>
struct clone_volatile :
	copy_volatile<source, typename remove_volatile<target>::type>
{};

template<typename source, typename target>
struct clone_cv :
	copy_cv<source, typename remove_cv<target>::type>
{};

template<typename _T>
struct strong_remove_const :
	copy_reference<_T, typename remove_const_ref<_T>::type>
{};

template<typename _T>
struct strong_remove_volatile :
	copy_reference<_T, typename remove_volatile_ref<_T>::type>
{};

template<typename _T>
struct strong_remove_cv :
	copy_reference<_T, typename remove_cv_ref<_T>::type>
{};

template<typename _T>
struct strong_add_const :
	copy_reference<_T, typename add_const<typename remove_reference<_T>::type>::type>
{};

template<typename _T>
struct strong_add_volatile :
	copy_reference<_T, typename add_volatile<typename remove_reference<_T>::type>::type>
{};

template<typename _T>
struct strong_add_cv :
	copy_reference<_T, typename add_cv<typename remove_reference<_T>::type>::type>
{};

template<typename source, typename target>
struct strong_copy_const :
	copy_reference<target, typename copy_const<source, typename remove_reference<target>::type>::type>
{};

template<typename source, typename target>
struct strong_copy_volatile :
	copy_reference<target, typename copy_volatile<source, typename remove_reference<target>::type>::type>
{};

template<typename source, typename target>
struct strong_copy_cv :
	copy_reference<target, typename copy_cv<source, typename remove_reference<target>::type>::type>
{};

template<typename source, typename target>
struct strong_clone_const :
	copy_reference<target, typename clone_const<source, typename remove_reference<target>::type>::type>
{};

template<typename source, typename target>
struct strong_clone_volatile :
	copy_reference<target, typename clone_volatile<source, typename remove_reference<target>::type>::type>
{};

template<typename source, typename target>
struct strong_clone_cv :
	copy_reference<target, typename clone_cv<source, typename remove_reference<target>::type>::type>
{};

} /* namespace dotnet_connector */
