#pragma once
#include <type_traits>

namespace dotnet_connector {

template<typename _Tto, typename _Tfrom>
inline
typename std::enable_if<std::is_pointer<_Tto>::value && std::is_polymorphic<_Tfrom>::value, _Tto>::type
dyn_cast(_Tfrom * x) {
	return dynamic_cast<_Tto>(x);
}

template<typename _Tto, typename _Tfrom>
inline
typename std::enable_if<std::is_pointer<_Tto>::value && !std::is_polymorphic<_Tfrom>::value && is_base_of<_Tto, _Tfrom>::value, _Tto>::type
dyn_cast(_Tfrom * x) {
	return x;
}

template<typename _Tto, typename _Tfrom>
inline
typename std::enable_if<std::is_pointer<_Tto>::value && !std::is_polymorphic<_Tfrom>::value && !is_base_of<_Tto, _Tfrom>::value, _Tto>::type
dyn_cast(_Tfrom * x) {
	return nullptr;
}

} /* namespace dotnet_connector */
