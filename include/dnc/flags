/*
  flags -- object handle flags
  Copyright (c) 2011 Eric Karge

  dotnet-connector, a small library assisting create c++/.net wrappers
  The authors can be contacted at <eric@struction.de>

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
*/

#pragma once

#ifdef __cplusplus_cli
#ifdef dotnet_connector_BUILD

	static
	flag const Forwarder = flag::Forwarder;

	static
	flag const Owning = flag::Owning;
	
	Flags(flag e) :
		_value(static_cast<integral_type>(e))
	{}
	static
	operator Flags(flag e) {
		return Flags(e);
	}
	
	static
	Flags
	operator|(Flags x, Flags y) {
		return Flags(x._value | y._value);
	}

	static
	Flags
	operator&(Flags x, Flags y) {
		return Flags(x._value & y._value);
	}

	static
	Flags
	operator^(Flags x, Flags y) {
		return Flags(x._value ^ y._value);
	}

	static
	Flags
	operator+(Flags x, Flags y) {
		return Flags(x._value | y._value);
	}

	static
	Flags
	operator-(Flags x, Flags y) {
		return Flags(x._value & ~y._value);
	}

	Flags %
	operator|=(Flags x) {
		_value |= x._value;
		return *this;
	}

	Flags %
	operator&=(Flags x) {
		_value &= x._value;
		return *this;
	}

	Flags %
	operator^=(Flags x) {
		_value ^= x._value;
		return *this;
	}

	Flags %
	operator+=(Flags x) {
		_value |= x._value;
		return *this;
	}

	Flags %
	operator-=(Flags x) {
		_value &= ~x._value;
		return *this;
	}

	static
	bool
	operator==(Flags x, Flags y) {
		return x._value == y._value;
	}

	static
	bool
	operator!=(Flags x, Flags y) {
		return x._value != y._value;
	}

	void
	set(flag e) {
		_value |= static_cast<integral_type>(e);
	}

	void
	unset(flag e) {
		_value &= ~static_cast<integral_type>(e);
	}

	void
	toggle(flag e) {
		_value ^= static_cast<integral_type>(e);
	}

	bool
	check(flag e) {
		return _value & static_cast<integral_type>(e);
	}

protected:
	Flags(integral_type value) :
		_value(value)
	{}
	static
	operator Flags(integral_type value) {
		return Flags(value);
	}

	integral_type
	_value;
};

} /* namespace dotnet_connector */
#endif /* def dotnet_connector_BUILD */
#endif /* def __cplusplus_cli */
